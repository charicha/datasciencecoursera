complete("specdata", 2)
# Part 2
complete <- function(directory, id = 1:332) {
files <- list.files(directory, full.names=TRUE)
x <- data.frame()
for (i in id) {
x <- rbind(x, read.csv(files[i]))
}
#compCases <- data.frame()
x <- x[complete.cases(x),]
for (j in id) {
#x2 <- subset(x, id=j)
xj <- x[id==j]
countj <- nrow(xj)
rowj <- c(j, count)
compCases <- rbind(compCases, rowj )
}
compCases
}
data[data$Analyte =="ATRAZINE"
& (data$Date >= '2006-01-01' & data$Date < '2007-01-01')]
###
###     newdata <- subset(mydata, age >= 20 | age < 10,
###                       select=c(ID, Weight))
## Return a data frame of the form:
## id nobs
## 1 117
## 2 1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
complete("specdata", 2)
# Part 2
complete <- function(directory, id = 1:332) {
files <- list.files(directory, full.names=TRUE)
x <- data.frame()
for (i in id) {
x <- rbind(x, read.csv(files[i]))
}
#compCases <- data.frame()
x <- x[complete.cases(x),]
for (j in id) {
#x2 <- subset(x, id=j)
xj <- x[id==j]
countj <- nrow(xj)
rowj <- c(j, countj)
compCases <- rbind(compCases, rowj )
}
compCases
}
data[data$Analyte =="ATRAZINE"
& (data$Date >= '2006-01-01' & data$Date < '2007-01-01')]
###
###     newdata <- subset(mydata, age >= 20 | age < 10,
###                       select=c(ID, Weight))
## Return a data frame of the form:
## id nobs
## 1 117
## 2 1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
complete("specdata", 2)
# Part 2
complete <- function(directory, id = 1:332) {
files <- list.files(directory, full.names=TRUE)
x <- data.frame()
for (i in id) {
x <- rbind(x, read.csv(files[i]))
}
compCases <- data.frame()
x <- x[complete.cases(x),]
for (j in id) {
#x2 <- subset(x, id=j)
xj <- x[id==j]
countj <- nrow(xj)
rowj <- c(j, countj)
compCases <- rbind(compCases, rowj )
}
compCases
}
data[data$Analyte =="ATRAZINE"
& (data$Date >= '2006-01-01' & data$Date < '2007-01-01')]
###
###     newdata <- subset(mydata, age >= 20 | age < 10,
###                       select=c(ID, Weight))
## Return a data frame of the form:
## id nobs
## 1 117
## 2 1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
complete("specdata", 2)
complete("specdata", 1)
# Part 2
complete <- function(directory, id = 1:332) {
files <- list.files(directory, full.names=TRUE)
x <- data.frame()
for (i in id) {
x <- rbind(x, read.csv(files[i]))
}
compCases <- data.frame()
x <- x[complete.cases(x),]
for (j in id) {
#x2 <- subset(x, id=j)
xj <- x[id==j]
countj <- nrow(xj)
rowj <- c(j, countj)
compCases <- rbind(compCases, rowj )
}
names(compCases) <- (c("id", "nobs"))
compCases
}
data[data$Analyte =="ATRAZINE"
& (data$Date >= '2006-01-01' & data$Date < '2007-01-01')]
###
###     newdata <- subset(mydata, age >= 20 | age < 10,
###                       select=c(ID, Weight))
## Return a data frame of the form:
## id nobs
## 1 117
## 2 1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
complete("specdata", 1)
complete("specdata", c(2,4,8,10,12))
complete("specdata", 30:25
)
complete("specdata", 3)
# Part 2
complete <- function(directory, id = 1:332) {
files <- list.files(directory, full.names=TRUE)
x <- data.frame()
for (i in id) {
x <- rbind(x, read.csv(files[i]))
}
compCases <- data.frame()
x <- x[complete.cases(x),]
for (j in id) {
#x2 <- subset(x, id=j)
xj <- x[id==j]
countj <- nrow(xj)
rowj <- c(j, countj)
compCases <- rbind(compCases, rowj )
}
names(compCases) <- (c("id", "nobs"))
compCases
}
complete("specdata", 3)
complete("specdata", 30:25
)
# Part 2
complete <- function(directory, id = 1:332) {
files <- list.files(directory, full.names=TRUE)
x <- data.frame()
for (i in id) {
x <- rbind(x, read.csv(files[i]))
}
compCases <- data.frame()
x <- x[complete.cases(x),]
for (j in id) {
#x2 <- subset(x, id=j)
xj <- x[id==j]
countj <- nrow(xj)
rowj <- c(j, countj)
compCases <- rbind(compCases, rowj )
}
names(compCases) <- (c("id", "nobs"))
compCases
}
complete("specdata", 3:5)
complete("specdata", 30:25)
complete("specdata", 1:8)
x
compCases
library(datasets)
data(iris)
?iris
iris
x <- iris
x
?mean
vir <- subset(iris, species=="virginica")
vir <- subset(iris, iris$species=="virginica")
vir
?subset
vir <- subset(iris, iris$Species=="virginica")
vir
mean(vir$Sepal.Length)
apply(iris,2,mean)
colMeans(iris)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
mtcars
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
209.21429 - 82.63636
debug(ls)
ls
ls(iris)
set.seed(1)
sample(1:10)
sample(1:30,4)
set.seed(1)
sample(1:10, 4)
sample(1:10, 4)
sample(letters, 5)
sample(1:10)
sample(1:10, replace=TRUE)
Rprof()
summaryRprof()
set.seed(1)
rpois(5, 2)
x <- rnorm(10)
x
summary(x)
std(x)
sdev(x)
?standard deviation
sd(x)
dpois(3)
?dpois
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
set.seed(1)
rpois(5, 2)
# Q3
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training
str(training)
IL <- ("IL" in names(testing)
IL <- training[, grep("^IL", names(training), value=TRUE)]
IL <- training[, grep("^IL", names(training), value=TRUE)]
IL
preProcess <- preProcess(IL, method="pcs", pcaComp=9)
trainPC <- predict(preProcess, IL)
modelFit M- train(training$type ~ ., method="glm", data=trainPC)
preProcess <- preProcess(IL, method="pca", pcaComp=9)
trainPC <- predict(preProcess, IL)
modelFit M- train(training$type ~ ., method="glm", data=trainPC)
preProcess <- preProcess(IL, method="pca", pcaComp=9)
trainPC <- predict(preProcess, IL)
modelFit <- train(training$type ~ ., method="glm", data=trainPC)
?lwd
help(lwd)
?pch
?par
?ctreeBag$aggregate
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
str(case)
str(sengemtationOriginal$case)
str(segmentationOriginal$case)
summary(segmentationOriginal$case)
summary(segmentationOriginal)
training <- createDataPartition(y=segmentationOriginal$Case)
training
training <- subset(segmentationOriginal, segmentationOriginal$Case='Train')
training <- subset(segmentationOriginal, segmentationOriginal$Case=='Train')
summary(training)
test <- [-training]
test <- subset(segmentationOriginal, segmentationOriginal$Case=='Test')
training
training[1:100,]
training[1:10,]
model <- train(class ~ ., method="rpart", data=training )
print(model$finalModel)
dim(training)
model <- train(Class ~ ., method="rpart", data=training )
print(model$finalModel)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
#1
training <- subset(segmentationOriginal, segmentationOriginal$Case=='Train')
test <- subset(segmentationOriginal, segmentationOriginal$Case=='Test')
set.seed(125)
model <- train(Class ~ ., method="rpart", data=training )
print(model$finalModel)
library(ISLR)
get.packages("ISLR")
get.package("ISLR")
get.packages(ISLR)
?get.packages
??get.packages
?get
install.packages("ISLR")
library(ISLR)
install.packages("AppliedPredictiveModeling")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
#install.packages("ISLR")
data(segmentationOriginal)
library(caret)
library(ISLR)
training <- subset(segmentationOriginal, segmentationOriginal$Case=='Train')
test <- subset(segmentationOriginal, segmentationOriginal$Case=='Test')
set.seed(125)
model <- train(Class ~ ., method="rpart", data=training )
install.packages("rpart")
install.packages("rpart")
library(rpart)
training <- subset(segmentationOriginal, segmentationOriginal$Case=='Train')
test <- subset(segmentationOriginal, segmentationOriginal$Case=='Test')
set.seed(125)
model <- train(Class ~ ., method="rpart", data=training )
print(model$finalModel)
#install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
#install.packages("ISLR")
#install.packages("rpart")
data(segmentationOriginal)
library(caret)
library(ISLR)
library(rpart)
install.packages("caret", "ISLR", "rpart", "AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
#install.packages("ISLR")
#install.packages("rpart")
data(segmentationOriginal)
library(caret)
library(ISLR)
library(rpart)
install.packages("caret", "ISLR", "rpart", "AppliedPredictiveModeling")
install.packages("caret", "ISLR", "rpart", "AppliedPredictiveModeling")
#install.packages("ISLR")
#install.packages("rpart")
data(segmentationOriginal)
library(caret)
library(ISLR)
library(rpart)
#1
training <- subset(segmentationOriginal, segmentationOriginal$Case=='Train')
test <- subset(segmentationOriginal, segmentationOriginal$Case=='Test')
set.seed(125)
model <- train(Class ~ ., method="rpart", data=training )
print(model$finalModel)
data(segmentationOriginal)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
training <- subset(segmentationOriginal, segmentationOriginal$Case=='Train')
test <- subset(segmentationOriginal, segmentationOriginal$Case=='Test')
set.seed(125)
model <- train(Class ~ ., method="rpart", data=training )
print(model$finalModel)
install.packages("e1071")
library("e1071")
model <- train(Class ~ ., method="rpart", data=training )
print(model$finalModel)
q1 <- data.frame(TotalIntench2=23000, FiberWidthCh1=10, PerimStatusCh1=12)
q1
predict(model, newdata=q1)
model
training[1:5,]
q1 <- data.frame(TotalIntenCh2=23000, FiberWidthCh1=10, PerimStatusCh1=12)
predict(model, newdata=q1)
predict(model, newdata=q1)
print(model$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmn")
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
olive
modelClassTree <- train(Area ~ ., method="rpart", data=olive)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
shiny::runApp('datasciencecoursera')
OE <- function(fg, fga, orb, to, a) {
(fg+a)/(fga-orb+a+to)
}
EOP <- function(OE, pts) {
EOP <- (.76*a + pts)*OE
}
OE(fg=9, fga=21, orb=0, to=5, a=4)
EOP(.433, 23)
OE <- function(fg, fga, orb, a, to) {
(fg+a)/(fga-orb+a+to)
}
EOP <- function(pts, fg, fga, orb, a, to) {
oe <- OE(fg, fga, orb, a, to)
EOP <- (.76*a + pts)*oe
}
OE(fg=9, fga=21, orb=0, to=5, a=4)
beal <- OE(fg=9, fga=21, orb=0, to=5, a=4)
EOPbeal <- EOP(pts=23, fg=9, fga=21, orb=0, a=4, to=5)
EOPbeal
OE <- function(fg, fga, orb, a, to) {
(fg+a)/(fga-orb+a+to)
}
EOP <- function(pts, fg, fga, orb, a, to) {
oe <- OE(fg, fga, orb, a, to)
EOP <- 1.5*(.76*a + pts)*oe
}
EOPbeal
EOPbeal <- EOP(pts=23, fg=9, fga=21, orb=0, a=4, to=5)
EOPbeal
runApp()
runApp("datasciencecoursera")
shiny::runApp('datasciencecoursera')
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
library(caret)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain]
testing = concrete[-inTrain, ]
training
head(training)
plot.enet(training)
head(training)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
z <- matrix[runif(1:10, runif(1:10)]
z <- matrix[runif(1:10), runif(1:10)]
z <- runif(1:10)
z
z <- runif(10, 1:10)
z <- runif(1:10, 5)
z <- round(runif(1:10)*10)
z
z2 <- rbind(z,10)
z2
z <- round(runif(1:5)*10)
z2 <- rbind(z,z,z,z,z)
z
z2
cache <- cachemean(z2)
z <- matrix(round(runif(1:5)*10),round(runif(1:5)*10))
z2 <- rbind(z,z,z,z,z)
cache <- cachemean(z2)
cache <- cachemean(z2)
z <- [1,4,5,9; -3,16,24,2; 0,7,-8,11; 4,24,-2, 4]
z <- [1,4,5,9; -3,16,24,2; 0,7,-8,11; 4,24,-2, 4]
z <- (1,4,5,9; -3,16,24,2; 0,7,-8,11; 4,24,-2, 4)
z <- (1 4 5 9; -3,16,24,2; 0,7,-8,11; 4,24,-2, 4)
z <- (1,4,5,9, -3,16,24,2, 0,7,-8,11, 4,24,-2, 4)
dim(z,4,4)
dim(z)
z <- (1,4,5,9, -3,16,24,2, 0,7,-8,11, 4,24,-2, 4)
z <- (1,4,5,9, -3,16,24,2, 0,7,-8,11, 4,24,-2, 4, ncol=4, nrow=4)
runApp()
setwd("datasciencecoursera")
runApp()
getwd
getwd()
runApp("BasketballAnalytics")
install(shiny)
library(shiny)
runApp("BasketballAnalytics")
